[{"id":"68306101d7c2b74f9f40ec656295f1cd","title":"How to use chatgpt to generate dialgram","content":"use gpt4 to generate diagram in 10 seconds, mermaid, plantUML, and other powerful visualization language\n\nmermaid\nuse gpt4 generate a calculator\nask gpt4 for mermaid code using please generate UML class in mermaid syntax\nask gpt4 for mermaid code using please generate flow chat for print_hello function\n\nPlantUMLask cursor or chatgpt to generate plantuml code for the graph using gernate plantUML for this file or 使用plantUML语法画出__init__函数的流程图  or draw sequence dialgram in plantumland then use online visualization at online generator\n1234567891011121314151617181920212223242526272829@startuml  class CA &#123;  -get_ca(sock_fd)  +__init__()  &#125;    class RSA &#123;  +encode(msg, pri_key)  +decode(cipher)  &#125;    class socket &#123;  +socket()  +bind(address)  +listen(backlog)  +accept() : (socket, address)  +send(data)  +recv(bufsize) : data  &#125;    class json &#123;  +loads(s) : obj  +dumps(obj) : str  &#125;    CA ..&gt; socket  CA ..&gt; RSA  CA ..&gt; json  @enduml\n\n类图![[Pasted image 20230508233225.png]]\n流程图![[Pasted image 20230508234308.png]]\n![[Pasted image 20230508232846.png]]\n12345678910111213@startumlstartif (condition1) then (yes)  :Action 1;else (no)  if (condition2) then (yes)    :Action 2;  else (no)    :Action 3;  endifendifstop@enduml\n\n时序图1234567891011121314151617181920212223@startumltitle &quot;get_ca Sequence Diagram&quot;actor ClientClient -&gt; CA : sock_fdactivate CAactivate sock_fdClient -&gt; sock_fd : request datasock_fd -&gt; CA : recv_data(request)CA -&gt; CA : generate certificate infoCA -&gt; RSA : rsa.encode(j_certi_info, pri_key)RSA -&gt; RSA : encryptionRSA --&gt; CA : encoded messageCA -&gt; sock_fd : send_data(encoded)sock_fd -&gt; Client : certificate infodeactivate CAdeactivate sock_fd@enduml\n\n![[Pasted image 20230508233439.png]]\nER图123456789101112131415161718192021222324252627282930@startumlentity area &#123;  + areaId [PK]  --  areaCode  areaName  level  cityCode  center  parentId&#125;entity customization &#123;  + id [PK]  --  uid  start_areaName  end_areaName  start_date  days  number  percapita_consumption  person_name  phone  remarks  status&#125;area ||--o&#123; customization@enduml\n\n![[Pasted image 20230513181253.png]]\nGraphvizExamplegraph LR\nA[Packet Sniffer] --> B[Capture Packets];\nB --> C{Packet Type}\nC -- IP --> D{Protocol}\nC -- TCP --> E{Flags}\nE -- FIN --> F[FIN Scan Detection]\nE -- NULL --> G[NULL Scan Detection]\nE -- XMAS --> H[XMAS Scan Detection]\nD -- HTTP --> I[HTTP Check]\nD -- FTP --> J[FTP Check]\nD -- SSH --> K[SSH Check]\nD -- Telnet --> L[Telnet Check]\nD -- DNS --> M[DNS Check]\nD -- SMTP --> N[SMTP Check]\n\nclassDiagram\n    class CA{\n        +__init__()\n        +get_ca(sock_fd)\n    }\n    class RSA{\n        +encode(data, key)\n        +decode(data, key)\n    }\n    class socket{\n        +socket()\n        +bind(address)\n        +listen(backlog)\n        +accept()\n        +send(data)\n        +recv(bufsize)\n        +close()\n    }\n    class json{\n        +loads(s)\n        +dumps(obj)\n    }\n    class datetime{\n        +date(year, month, day)\n    }\n    class struct{\n        +pack(format, v1, v2, ...)\n        +unpack(format, buffer)\n        +calcsize(format)\n    }\n    class bytes{\n        +bytes(string, encoding)\n    }\n    class str{\n        +split(sep)\n    }\n    class int{\n        +__mod__(other)\n        +__floordiv__(other)\n    }\n    class print{\n        +print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\n    }\n    class sys{\n        +stdout\n    }\n    CA --> RSA\n    CA --> socket\n    CA --> json\n    CA --> datetime\n    CA --> struct\n    CA --> bytes\n    CA --> str\n    CA --> int\n    CA --> print\n    print --> sys\n\nclassDiagram\n    class Response {\n        >\n        - max_rtt: any\n        - min_rtt: any\n        - avg_rtt: any\n        - packet_lost: any\n        - ret_code: any\n        - messages: any[]\n        - packet_size: any\n        - timeout: any\n        - dest: any\n        - dest_ip: any\n        + __init__()\n        + __str__(): str\n        + to_dict(): dict\n        + is_reached(): bool\n        + print_messages()\n    }\n\ngraph TD\n    Start[Start] --> A(Call print_messages)\n    A --> B{Any messages?}\n    B -- Yes --> C(Loop through messages)\n    C --> D(Print message)\n    D --> B\n    B -- No --> End[End]\n\ngraph TD;\n    A(input string s) --get frequency of each character--> B(freqs)\n    B --calculate entropy for each character frequency--> C(entropy)\n    C --sum entropy values for all characters--> D(final entropy value)\n    D --return final entropy value--> E(output entropy)\n\n\ngraph TD\nA[num1] -->|operator| B(operator)\nC[num2] -->|operator| B(operator)\nB(operator) -->|result| D[result]\n\nclassDiagram\nclass Ping {\n+timeout : int\n+packet_size : int\n+own_id : Type[int, None]\n+udp : bool\n+bind : Type[None, tuple]\n+quiet : bool\n-max_wait : int\n-seq_number : int\n+_to_ip(addr: str) : str\n+_is_valid_ip(addr: str) : bool\n+_checksum(source_string: str) : str\n+__init__(timeout: int, packet_size: int, own_id: Type[int, None], udp: bool, bind: Type[None, tuple], quiet: bool) : None\n}\n\nclassDiagram\n    class Response {\n        >\n        - max_rtt: any\n        - min_rtt: any\n        - avg_rtt: any\n        - packet_lost: any\n        - ret_code: any\n        - messages: any[]\n        - packet_size: any\n        - timeout: any\n        - dest: any\n        - dest_ip: any\n        + __init__()\n        + __str__(): str\n        + to_dict(): dict\n        + is_reached(): bool\n        + print_messages()\n    }\n\nclassDiagram\n    class QMainWindow{\n        +__init__()\n    }\n    \n    QMainWindow \nclassDiagram\n    class Packet {\n        >\n        -srcIP: str\n        -protocol: int\n        -rawData: str\n        -flags: int\n        +Packet(in_packet: scapy.layers.l2.Ether): void\n    }\n    class Main {\n        >\n        -scan_check(in_packet: Packet): str\n    }\n    Packet -- Main\n\n\ngraph TD\nA(Start) --> B{Packet Captured?}\nB -->|Yes| C(Extract Payload)\nC --> D{Signature Matched?}\nD -->|Yes| E(Generate Alert)\nD -->|No| C\nB -->|No| A\n\n\nclassDiagram\n    class AES{\n        - KEY : String\n        - MIX_COLUMN_MATRIX : List[List[int]]\n        - INV_MIX_COLUMN_MATRIX : List[List[int]]\n        - RCON : List[int]\n        - w_key : List[int]\n        - SBOX : Tuple[int, ...]\n        + encrypt(plaintext : bytes) : bytes\n        + decrypt(ciphertext : bytes) : bytes\n        - _expand_key() : None\n        - _sub_bytes(state : List[int]) : List[int]\n        - _shift_rows(state : List[int]) : List[int]\n        - _mix_columns(state : List[int], matrix : List[List[int]]) : List[int]\n        - _add_round_key(state : List[int], round_key : List[int]) : List[int]\n        - _inv_sub_bytes(state : List[int]) : List[int]\n        - _inv_shift_rows(state : List[int]) : List[int]\n        - _inv_mix_columns(state : List[int]) : List[int]\n    }\nclassDiagram\n    class Client\n    class RSA\n    class AES\n    class Socket\n    class datetime\n    class json\n    class struct\n    class bytes\n    class str\n\n    Client --|> RSA\n    Client --|> AES\n    Client --|> Socket\n    Client --> bytes\n    Client --> str\n    RSA --> datetime\n    RSA --> json\n    RSA --> bytes\n    RSA --> str\n    AES --> bytes\n    AES --> str\n    Socket --> struct\n\nclassDiagram\n    class Client\n    class RSA\n    class AES\n    class Socket\n    class datetime\n    class json\n    class struct\n    class bytes\n    class str\n\n    Client --|> RSA\n    Client --|> AES\n    Client --|> Socket\n    Client --> bytes\n    Client --> str\n    RSA --> datetime\n    RSA --> json\n    RSA --> bytes\n    RSA --> str\n    AES --> bytes\n    AES --> str\n    Socket --> struct\n\nclassDiagram\n    class CA {\n        -port: int\n        -BUF_SIZE: int\n        +send_data(sock, data)\n        +recv_data(sock)\n        +str2utf8(data)\n        +utf82str(data)\n        +get_ca(sock_fd)\n    }\n    class RSA {\n        +encode(data, key)\n        +decode(data, key)\n    }\n    class datetime {\n        +date(year, month, day)\n    }\n\n    class socket\n    class json\n    class struct\n\n    CA --> RSA : uses\n    CA --> datetime : uses\n    CA --> socket : uses\n    CA --> json : uses\n    CA --> struct : uses\n\n\n","slug":"Dialgram GPT4","date":"2023-11-17T06:07:02.783Z","categories_index":"","tags_index":"chatgpt, diagram","author_index":"coolder"},{"id":"f73a8e23e6f6f669cf99c7dba8fa0722","title":"","content":"#tags asddaw\nThis is a test123pinrt(&quot;Hello&quot;)\n\n123456#include &lt;stdio.h&gt;int main(int argc, char **argv)&#123;    printf(&quot;Hello&quot;);&#125;\n\n\nimage show\n\n\n","slug":"test-post","date":"2023-11-17T05:39:25.572Z","categories_index":"","tags_index":"","author_index":"coolder"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post1$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server1$ hexo server\n\nMore info: Server\nGenerate static files1$ hexo generate\n\nMore info: Generating\nDeploy to remote sites1$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2023-11-16T08:13:30.494Z","categories_index":"","tags_index":"","author_index":"coolder"}]