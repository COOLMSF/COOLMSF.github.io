{"title":"How to use chatgpt to generate dialgram","uid":"68306101d7c2b74f9f40ec656295f1cd","slug":"Dialgram GPT4","date":"2023-11-17T06:07:02.783Z","updated":"2023-11-17T06:07:02.784Z","comments":true,"path":"api/articles/Dialgram GPT4.json","cover":null,"content":"<p>use gpt4 to generate diagram in 10 seconds, mermaid, plantUML, and other powerful visualization language</p>\n<hr>\n<h1 id=\"mermaid\"><a href=\"#mermaid\" class=\"headerlink\" title=\"mermaid\"></a>mermaid</h1><ol>\n<li>use gpt4 generate a <code>calculator</code></li>\n<li>ask gpt4 for mermaid code using <code>please generate UML class in mermaid syntax</code></li>\n<li>ask gpt4 for mermaid code using <code>please generate flow chat for print_hello function</code></li>\n</ol>\n<h1 id=\"PlantUML\"><a href=\"#PlantUML\" class=\"headerlink\" title=\"PlantUML\"></a>PlantUML</h1><p>ask cursor or chatgpt to generate plantuml code for the graph using <code>gernate plantUML for this file</code> or <code>使用plantUML语法画出__init__函数的流程图</code>  or <code>draw sequence dialgram in plantuml</code>and then use online visualization at <a href=\"http://www.plantuml.com/plantuml/uml/JP1HJiCm38RVSueyUjhO0NX0Gzm03X2vZbUofaaLfqY0k3isAzhU_lpwFjljIJgslixPKKOH__Bilzt3o3qGWbIQmZdkt3w4L58F0NRknstewvknUovK8yCiuy4lBOM9FrM8_DTIMjwvtKasahjvrmJA3gb4m1WRY-Wp9-bSO42QSXsrG29UbFIF7gxMmTzmORKZTjJSc3vWMC-IljXmgs-xBrABRSuLeu0OK8UBthhEYu16QwGtC_G_78zFsxdRoxxuFzeiT-AYRlu5\">online generator</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml  </span><br><span class=\"line\">class CA &#123;  </span><br><span class=\"line\">-get_ca(sock_fd)  </span><br><span class=\"line\">+__init__()  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">class RSA &#123;  </span><br><span class=\"line\">+encode(msg, pri_key)  </span><br><span class=\"line\">+decode(cipher)  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">class socket &#123;  </span><br><span class=\"line\">+socket()  </span><br><span class=\"line\">+bind(address)  </span><br><span class=\"line\">+listen(backlog)  </span><br><span class=\"line\">+accept() : (socket, address)  </span><br><span class=\"line\">+send(data)  </span><br><span class=\"line\">+recv(bufsize) : data  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">class json &#123;  </span><br><span class=\"line\">+loads(s) : obj  </span><br><span class=\"line\">+dumps(obj) : str  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">CA ..&gt; socket  </span><br><span class=\"line\">CA ..&gt; RSA  </span><br><span class=\"line\">CA ..&gt; json  </span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类图\"><a href=\"#类图\" class=\"headerlink\" title=\"类图\"></a>类图</h2><p>![[Pasted image 20230508233225.png]]</p>\n<h2 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h2><p>![[Pasted image 20230508234308.png]]</p>\n<p>![[Pasted image 20230508232846.png]]</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">start</span><br><span class=\"line\">if (condition1) then (yes)</span><br><span class=\"line\">  :Action 1;</span><br><span class=\"line\">else (no)</span><br><span class=\"line\">  if (condition2) then (yes)</span><br><span class=\"line\">    :Action 2;</span><br><span class=\"line\">  else (no)</span><br><span class=\"line\">    :Action 3;</span><br><span class=\"line\">  endif</span><br><span class=\"line\">endif</span><br><span class=\"line\">stop</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时序图\"><a href=\"#时序图\" class=\"headerlink\" title=\"时序图\"></a>时序图</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">title &quot;get_ca Sequence Diagram&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">actor Client</span><br><span class=\"line\">Client -&gt; CA : sock_fd</span><br><span class=\"line\"></span><br><span class=\"line\">activate CA</span><br><span class=\"line\">activate sock_fd</span><br><span class=\"line\"></span><br><span class=\"line\">Client -&gt; sock_fd : request data</span><br><span class=\"line\">sock_fd -&gt; CA : recv_data(request)</span><br><span class=\"line\"></span><br><span class=\"line\">CA -&gt; CA : generate certificate info</span><br><span class=\"line\">CA -&gt; RSA : rsa.encode(j_certi_info, pri_key)</span><br><span class=\"line\">RSA -&gt; RSA : encryption</span><br><span class=\"line\">RSA --&gt; CA : encoded message</span><br><span class=\"line\">CA -&gt; sock_fd : send_data(encoded)</span><br><span class=\"line\"></span><br><span class=\"line\">sock_fd -&gt; Client : certificate info</span><br><span class=\"line\"></span><br><span class=\"line\">deactivate CA</span><br><span class=\"line\">deactivate sock_fd</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<p>![[Pasted image 20230508233439.png]]</p>\n<h2 id=\"ER图\"><a href=\"#ER图\" class=\"headerlink\" title=\"ER图\"></a>ER图</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@startuml</span><br><span class=\"line\">entity area &#123;</span><br><span class=\"line\">  + areaId [PK]</span><br><span class=\"line\">  --</span><br><span class=\"line\">  areaCode</span><br><span class=\"line\">  areaName</span><br><span class=\"line\">  level</span><br><span class=\"line\">  cityCode</span><br><span class=\"line\">  center</span><br><span class=\"line\">  parentId</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">entity customization &#123;</span><br><span class=\"line\">  + id [PK]</span><br><span class=\"line\">  --</span><br><span class=\"line\">  uid</span><br><span class=\"line\">  start_areaName</span><br><span class=\"line\">  end_areaName</span><br><span class=\"line\">  start_date</span><br><span class=\"line\">  days</span><br><span class=\"line\">  number</span><br><span class=\"line\">  percapita_consumption</span><br><span class=\"line\">  person_name</span><br><span class=\"line\">  phone</span><br><span class=\"line\">  remarks</span><br><span class=\"line\">  status</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">area ||--o&#123; customization</span><br><span class=\"line\">@enduml</span><br></pre></td></tr></table></figure>\n\n<p>![[Pasted image 20230513181253.png]]</p>\n<h1 id=\"Graphviz\"><a href=\"#Graphviz\" class=\"headerlink\" title=\"Graphviz\"></a>Graphviz</h1><h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h1><pre class=\"mermaid\">graph LR\nA[Packet Sniffer] --> B[Capture Packets];\nB --> C{Packet Type}\nC -- IP --> D{Protocol}\nC -- TCP --> E{Flags}\nE -- FIN --> F[FIN Scan Detection]\nE -- NULL --> G[NULL Scan Detection]\nE -- XMAS --> H[XMAS Scan Detection]\nD -- HTTP --> I[HTTP Check]\nD -- FTP --> J[FTP Check]\nD -- SSH --> K[SSH Check]\nD -- Telnet --> L[Telnet Check]\nD -- DNS --> M[DNS Check]\nD -- SMTP --> N[SMTP Check]</pre>\n\n<pre class=\"mermaid\">classDiagram\n    class CA{\n        +__init__()\n        +get_ca(sock_fd)\n    }\n    class RSA{\n        +encode(data, key)\n        +decode(data, key)\n    }\n    class socket{\n        +socket()\n        +bind(address)\n        +listen(backlog)\n        +accept()\n        +send(data)\n        +recv(bufsize)\n        +close()\n    }\n    class json{\n        +loads(s)\n        +dumps(obj)\n    }\n    class datetime{\n        +date(year, month, day)\n    }\n    class struct{\n        +pack(format, v1, v2, ...)\n        +unpack(format, buffer)\n        +calcsize(format)\n    }\n    class bytes{\n        +bytes(string, encoding)\n    }\n    class str{\n        +split(sep)\n    }\n    class int{\n        +__mod__(other)\n        +__floordiv__(other)\n    }\n    class print{\n        +print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)\n    }\n    class sys{\n        +stdout\n    }\n    CA --> RSA\n    CA --> socket\n    CA --> json\n    CA --> datetime\n    CA --> struct\n    CA --> bytes\n    CA --> str\n    CA --> int\n    CA --> print\n    print --> sys</pre>\n\n<pre class=\"mermaid\">classDiagram\n    class Response {\n        << (D,green) Response >>\n        - max_rtt: any\n        - min_rtt: any\n        - avg_rtt: any\n        - packet_lost: any\n        - ret_code: any\n        - messages: any[]\n        - packet_size: any\n        - timeout: any\n        - dest: any\n        - dest_ip: any\n        + __init__()\n        + __str__(): str\n        + to_dict(): dict\n        + is_reached(): bool\n        + print_messages()\n    }</pre>\n\n<pre class=\"mermaid\">graph TD\n    Start[Start] --> A(Call print_messages)\n    A --> B{Any messages?}\n    B -- Yes --> C(Loop through messages)\n    C --> D(Print message)\n    D --> B\n    B -- No --> End[End]</pre>\n\n<pre class=\"mermaid\">graph TD;\n    A(input string s) --get frequency of each character--> B(freqs)\n    B --calculate entropy for each character frequency--> C(entropy)\n    C --sum entropy values for all characters--> D(final entropy value)\n    D --return final entropy value--> E(output entropy)</pre>\n\n<pre class=\"mermaid\">\ngraph TD\nA[num1] -->|operator| B(operator)\nC[num2] -->|operator| B(operator)\nB(operator) -->|result| D[result]</pre>\n\n<pre class=\"mermaid\">classDiagram\nclass Ping {\n+timeout : int\n+packet_size : int\n+own_id : Type[int, None]\n+udp : bool\n+bind : Type[None, tuple]\n+quiet : bool\n-max_wait : int\n-seq_number : int\n+_to_ip(addr: str) : str\n+_is_valid_ip(addr: str) : bool\n+_checksum(source_string: str) : str\n+__init__(timeout: int, packet_size: int, own_id: Type[int, None], udp: bool, bind: Type[None, tuple], quiet: bool) : None\n}</pre>\n\n<pre class=\"mermaid\">classDiagram\n    class Response {\n        << (D,green) Response >>\n        - max_rtt: any\n        - min_rtt: any\n        - avg_rtt: any\n        - packet_lost: any\n        - ret_code: any\n        - messages: any[]\n        - packet_size: any\n        - timeout: any\n        - dest: any\n        - dest_ip: any\n        + __init__()\n        + __str__(): str\n        + to_dict(): dict\n        + is_reached(): bool\n        + print_messages()\n    }</pre>\n\n<pre class=\"mermaid\">classDiagram\n    class QMainWindow{\n        +__init__()\n    }\n    \n    QMainWindow <|-- MainWindow\n    \n    class Ui_MainWindow {\n        +setupUi()\n    }\n    \n    MainWindow *-- Ui_MainWindow\n\n    class Settings\n\n    MainWindow *-- Settings\n    \n    class UIFunctions {\n        +selectMenu()\n        +resetStyle()\n        +toggleMenu()\n        +toggleLeftBox()\n        +toggleRightBox()\n        +resize_grips()\n        +uiDefinitions()\n        +theme()\n    }\n    \n    MainWindow *-- UIFunctions\n    \n    class AppFunctions {\n        +setThemeHack()\n    }\n    \n    MainWindow *-- AppFunctions</pre>\n<pre class=\"mermaid\">classDiagram\n    class Packet {\n        <<Data Type>>\n        -srcIP: str\n        -protocol: int\n        -rawData: str\n        -flags: int\n        +Packet(in_packet: scapy.layers.l2.Ether): void\n    }\n    class Main {\n        <<Controller>>\n        -scan_check(in_packet: Packet): str\n    }\n    Packet -- Main</pre>\n\n\n<pre class=\"mermaid\">graph TD\nA(Start) --> B{Packet Captured?}\nB -->|Yes| C(Extract Payload)\nC --> D{Signature Matched?}\nD -->|Yes| E(Generate Alert)\nD -->|No| C\nB -->|No| A</pre>\n\n\n<pre class=\"mermaid\">classDiagram\n    class AES{\n        - KEY : String\n        - MIX_COLUMN_MATRIX : List[List[int]]\n        - INV_MIX_COLUMN_MATRIX : List[List[int]]\n        - RCON : List[int]\n        - w_key : List[int]\n        - SBOX : Tuple[int, ...]\n        + encrypt(plaintext : bytes) : bytes\n        + decrypt(ciphertext : bytes) : bytes\n        - _expand_key() : None\n        - _sub_bytes(state : List[int]) : List[int]\n        - _shift_rows(state : List[int]) : List[int]\n        - _mix_columns(state : List[int], matrix : List[List[int]]) : List[int]\n        - _add_round_key(state : List[int], round_key : List[int]) : List[int]\n        - _inv_sub_bytes(state : List[int]) : List[int]\n        - _inv_shift_rows(state : List[int]) : List[int]\n        - _inv_mix_columns(state : List[int]) : List[int]\n    }</pre>\n<pre class=\"mermaid\">classDiagram\n    class Client\n    class RSA\n    class AES\n    class Socket\n    class datetime\n    class json\n    class struct\n    class bytes\n    class str\n\n    Client --|> RSA\n    Client --|> AES\n    Client --|> Socket\n    Client --> bytes\n    Client --> str\n    RSA --> datetime\n    RSA --> json\n    RSA --> bytes\n    RSA --> str\n    AES --> bytes\n    AES --> str\n    Socket --> struct</pre>\n\n<pre class=\"mermaid\">classDiagram\n    class Client\n    class RSA\n    class AES\n    class Socket\n    class datetime\n    class json\n    class struct\n    class bytes\n    class str\n\n    Client --|> RSA\n    Client --|> AES\n    Client --|> Socket\n    Client --> bytes\n    Client --> str\n    RSA --> datetime\n    RSA --> json\n    RSA --> bytes\n    RSA --> str\n    AES --> bytes\n    AES --> str\n    Socket --> struct</pre>\n\n<pre class=\"mermaid\">classDiagram\n    class CA {\n        -port: int\n        -BUF_SIZE: int\n        +send_data(sock, data)\n        +recv_data(sock)\n        +str2utf8(data)\n        +utf82str(data)\n        +get_ca(sock_fd)\n    }\n    class RSA {\n        +encode(data, key)\n        +decode(data, key)\n    }\n    class datetime {\n        +date(year, month, day)\n    }\n\n    class socket\n    class json\n    class struct\n\n    CA --> RSA : uses\n    CA --> datetime : uses\n    CA --> socket : uses\n    CA --> json : uses\n    CA --> struct : uses</pre>\n\n\n","feature":true,"text":"use gpt4 to generate diagram in 10 seconds, mermaid, plantUML, and other powerfu...","permalink":"/post/Dialgram GPT4","photos":[],"count_time":{"symbolsCount":"8.1k","symbolsTime":"7 mins."},"categories":[],"tags":[{"name":"chatgpt, diagram","slug":"chatgpt-diagram","count":1,"path":"api/tags/chatgpt-diagram.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#mermaid\"><span class=\"toc-text\">mermaid</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#PlantUML\"><span class=\"toc-text\">PlantUML</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%9B%BE\"><span class=\"toc-text\">类图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%81%E7%A8%8B%E5%9B%BE\"><span class=\"toc-text\">流程图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E5%BA%8F%E5%9B%BE\"><span class=\"toc-text\">时序图</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ER%E5%9B%BE\"><span class=\"toc-text\">ER图</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Graphviz\"><span class=\"toc-text\">Graphviz</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Example\"><span class=\"toc-text\">Example</span></a></li></ol>","author":{"name":"coolder","slug":"blog-author","avatar":"/data/avt.jpeg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{},"next_post":{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"test-post","date":"2023-11-17T05:39:25.572Z","updated":"2023-11-17T05:39:25.572Z","comments":true,"path":"api/articles/test-post.json","cover":[],"text":"#tags asddaw This is a test123pinrt(&quot;Hello&quot;) 123456#include &lt;stdio....","permalink":"/post/test-post","photos":[],"count_time":{"symbolsCount":175,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"coolder","slug":"blog-author","avatar":"/data/avt.jpeg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}